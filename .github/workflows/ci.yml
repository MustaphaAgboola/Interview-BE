name: Build, Test and Deploy to AWS EKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: my-cluster
  KUBERNETES_NAMESPACE: default
  DOCKER_HUB_IMAGE: 6lackcoder/interview-be # Replace with your Docker Hub image
  APP_NAME: interview-be
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # - name: Run linting
      #   run: npm run lint

      # - name: Run tests
      #   run: npm test

      - name: Build application
        run: npm run

  security-scan:
    name: Security Scan
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Run npm audit
      #   run: npm audit --audit-level=high

      # - name: OWASP Dependency Check
      #   uses: dependency-check/Dependency-Check_Action@main
      #   with:
      #     project: 'express-app'
      #     path: '.'
      #     format: 'HTML'
      #     out: 'reports'
      #     args: >
      #       --enableExperimental
      #       --suppression suppression.xml

      # - name: Upload security reports
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: security-reports
      #     path: reports/

  docker-build-push:
    name: Build and Push Docker Image
    needs: security-scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_HUB_IMAGE }}:latest
            ${{ env.DOCKER_HUB_IMAGE }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_IMAGE }}:buildcache,mode=max

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ env.DOCKER_HUB_IMAGE }}:${{ github.sha }}
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

  deploy:
    name: Deploy to EKS
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
      - name: Update deployment image
        run: |
          sed -i "s|image:.*|image: ${{ env.DOCKER_HUB_IMAGE }}:${{ github.sha }}|g" kubernetes/deployment.yaml
      
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f kubernetes/deployment.yml
          kubectl apply -f kubernetes/service.yml
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ env.APP_NAME }}
          echo "âœ… Application successfully deployed to EKS!"